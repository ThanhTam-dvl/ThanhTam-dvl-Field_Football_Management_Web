üìã T√ìM T·∫ÆT D·ª∞ √ÅN WEBSITE QU·∫¢N L√ù S√ÇN B√ìNG (C·∫¨P NH·∫¨T)
üéØ M·ª§C TI√äU D·ª∞ √ÅN
Website ƒë·∫∑t s√¢n b√≥ng v√† qu·∫£n l√Ω s√¢n b√≥ng v·ªõi 2 ph√≠a:
Kh√°ch h√†ng: ƒê·∫∑t s√¢n, t√¨m k√®o, gh√©p ƒë·ªôi
Admin: Qu·∫£n l√Ω s√¢n, duy·ªát booking, th·ªëng k√™ doanh thu
üõ† C√îNG NGH·ªÜ

Backend: Node.js + Express + MySQL
Frontend: React + Vite + CSS vanilla
Auth: OTP cho customer, Session-based cho admin
Libraries: axios, react-router-dom, nodemailer, fontawesome

üóÑÔ∏è DATABASE SCHEMA (MySQL)
Database: football_field_management
12 b·∫£ng ch√≠nh:

users - Ng∆∞·ªùi d√πng (customer), phone_number unique, OTP auth
admins - Admin users v·ªõi session-based auth, permissions JSON
admin_sessions - Session management cho admin
fields - S√¢n b√≥ng (5vs5/7vs7/11vs11), price_per_hour, facilities JSON
bookings - ƒê·∫∑t s√¢n, c√≥ start_time/end_time, status (pending/approved/cancelled/completed)
booking_services - D·ªãch v·ª• k√®m theo booking
services - Kho ƒë·ªì u·ªëng/th·ª©c ƒÉn/thi·∫øt b·ªã, c√≥ stock
maintenance_schedules - L·ªãch b·∫£o tr√¨ s√¢n
matches - K√®o b√≥ng ƒë√°, c√≥ allow_join cho gh√©p ƒë·ªôi
match_participants - Ng∆∞·ªùi tham gia k√®o
team_join_posts - ƒêƒÉng tin gh√©p ƒë·ªôi
otp_codes - M√£ OTP c√≥ th·ªùi gian h·∫øt h·∫°n

üîß BACKEND STRUCTURE (Node.js + Express)
üìÅ Backend Structure
/config

db.js - MySQL connection setup

/controllers (Business logic)

authController.js - OTP g·ª≠i qua email/SMS, verify OTP, t·ª± ƒë·ªông t·∫°o user
adminAuthController.js - Admin login, session management, change password
adminController.js - [HO√ÄN TH√ÄNH] Dashboard stats, booking management, user management, field management, revenue reports
bookingController.js - T·∫°o booking v·ªõi logic t√≠nh gi√° ph·ª©c t·∫°p, l·∫•y booking theo user
fieldController.js - L·∫•y t·∫•t c·∫£ s√¢n, t√¨m s√¢n tr·ªëng theo th·ªùi gian
matchController.js - CRUD k√®o, tham gia k√®o, l·∫•y participants
serviceController.js - L·∫•y d·ªãch v·ª•, filter theo category
maintenanceController.js - CRUD l·ªãch b·∫£o tr√¨
userController.js - CRUD user, update profile
teamJoinController.js - CRUD tin gh√©p ƒë·ªôi
contactController.js - G·ª≠i email li√™n h·ªá qua nodemailer

/models (Database queries)

Admin.js - Admin CRUD, session management, dashboard statistics
Field.js - Logic ph·ª©c t·∫°p t√¨m s√¢n tr·ªëng, overlap checking
Booking.js - Insert/get bookings
Match.js - CRUD matches v·ªõi filtering
MatchParticipant.js - Join/leave matches
Service.js - Get services by category
Maintenance.js - CRUD maintenance schedules
User.js - CRUD users, createIfNotExist logic
TeamJoin.js - CRUD team join posts v·ªõi filtering
Otp.js - OTP verification logic

/middleware

adminAuth.js - Admin authentication, permission checking, super admin verification

/routes (API endpoints)

authRoutes.js - POST /send-otp, /verify-otp
adminRoutes.js - [HO√ÄN TH√ÄNH] Complete admin API: auth, dashboard, bookings, users, fields, revenue
fieldRoutes.js - GET /, /available
bookingRoutes.js - POST /, GET /date, /user/:userId
matchRoutes.js - GET /, POST /, POST /join, GET /:id/participants
serviceRoutes.js - GET /, /:category
maintenanceRoutes.js - GET /, POST /, GET /field/:fieldId
userRoutes.js - GET /, /:id, PUT /:id, DELETE /:id
teamJoinRoutes.js - GET /, POST /
contactRoutes.js - POST /

‚öõÔ∏è FRONTEND STRUCTURE (React + Vite)
üìÅ Frontend Structure
Customer Pages (HO√ÄN TH√ÄNH)

Home.jsx - Landing page v·ªõi hero, field status timeline, features
Booking.jsx - Search form, field cards, booking modal integration
FindMatch.jsx - Danh s√°ch k√®o, filter, create match modal
JoinTeam.jsx - Danh s√°ch tin gh√©p ƒë·ªôi, filter, create post modal
Contact.jsx - Contact form g·ª≠i email, th√¥ng tin li√™n h·ªá, map
UserProfile.jsx - Update user info, stats, logout

Admin Pages (HO√ÄN TH√ÄNH)

AdminDashboard.jsx - [HO√ÄN TH√ÄNH] Dashboard v·ªõi stats cards, recent bookings, quick actions
AdminFieldManagement.jsx - [HO√ÄN TH√ÄNH] Qu·∫£n l√Ω s√¢n v·ªõi timeline view, manual booking, delete booking
AdminBookingManagement.jsx - [M·ªöI HO√ÄN TH√ÄNH] Qu·∫£n l√Ω ƒë·∫∑t s√¢n v·ªõi filters, bulk actions, CRUD operations#
AdminCustomerManagement.jsx [M·ªöI HO√ÄN TH√ÄNH]

Admin Components (HO√ÄN TH√ÄNH)

AdminLayout.jsx - [HO√ÄN TH√ÄNH] Layout v·ªõi sidebar, mobile nav, breadcrumb
AdminLogin.jsx - [HO√ÄN TH√ÄNH] Admin login form v·ªõi demo accounts
ProtectedAdminRoute.jsx - [HO√ÄN TH√ÄNH] Route protection v·ªõi permission checking
BookingFilters.jsx - [M·ªöI] Filters cho t√¨m ki·∫øm v√† l·ªçc booking
BookingTable.jsx - [M·ªöI] Table responsive v·ªõi desktop/mobile views
BookingModal.jsx - [M·ªöI] Modal t·∫°o/edit booking v·ªõi validation
ConfirmModal.jsx - [M·ªöI] Modal x√°c nh·∫≠n cho c√°c h√†nh ƒë·ªông nguy hi·ªÉm

Customer Components (HO√ÄN TH√ÄNH)

Header.jsx - Navigation, login button, mobile menu, user dropdown
Footer.jsx - Footer links, contact info, social media
LoginModal.jsx - 2-step OTP login (phone ‚Üí OTP), timer countdown
BookingSearchForm.jsx - Complex search v·ªõi validation, time logic
BookingModal.jsx - Booking confirmation v·ªõi user info, payment method
FieldCard.jsx - Display field info, available slots, book button
FieldStatus.jsx - Real-time timeline view c√°c s√¢n (available/booked/maintenance)
MatchCard.jsx - Display match info, contact, join team
CreateMatchModal.jsx - Form t·∫°o k√®o v·ªõi validation
ContactModal.jsx - Show contact info v·ªõi Zalo/call links
JoinTeamCard.jsx - Display team post, contact
JoinTeamModal.jsx - Form ƒëƒÉng tin gh√©p ƒë·ªôi
Features.jsx - Feature cards cho homepage
ScrollToTop.jsx - Auto scroll on route change

Context & Services (HO√ÄN TH√ÄNH)

AuthContext.jsx - Customer state management, localStorage persistence
AdminContext.jsx - [HO√ÄN TH√ÄNH] Admin state management, session verification
adminService.jsx - [HO√ÄN TH√ÄNH C·∫¨P NH·∫¨T] Dashboard, bookings, users, fields, revenue APIs v·ªõi full CRUD
authService.jsx - sendOtp(), verifyOtp()
bookingService.jsx - fetchAvailableFields(), createBooking() v·ªõi complex logic
matchService.jsx - fetchMatches(), createMatch(), joinMatch()
teamJoinService.jsx - fetchTeamJoinPosts(), createTeamJoinPost()

Styles (HO√ÄN TH√ÄNH)

styles.css - Customer CSS (~2000 lines): responsive, animations, modals, forms
admin.css - [HO√ÄN TH√ÄNH] Admin CSS (~3000 lines): dark theme, layouts, components
admin-booking.css - [M·ªöI] Booking management specific styles: filters, table, modals
field-management.css - Field management specific styles: timeline, modals
common.css - Shared styles cho customer v√† maintenance

üéØ CH·ª®C NƒÇNG ƒê√É HO√ÄN THI·ªÜN
üë§ User Features:

Authentication: OTP login qua phone/email
Booking System: T√¨m s√¢n tr·ªëng, ƒë·∫∑t s√¢n v·ªõi logic gi√° ph·ª©c t·∫°p
Match Finding: T·∫°o k√®o, t√¨m k√®o, tham gia ƒë·ªôi
Team Join: ƒêƒÉng tin c·∫ßn ng∆∞·ªùi, t√¨m ƒë·ªôi thi·∫øu ng∆∞·ªùi
Profile Management: C·∫≠p nh·∫≠t th√¥ng tin, xem th·ªëng k√™
Contact: G·ª≠i email li√™n h·ªá v·ªõi Google Maps

üîß Technical Features:

Real-time Field Status: Timeline view v·ªõi overlap checking
Complex Pricing: Gi√° theo gi·ªù v√† lo·∫°i s√¢n
Advanced Search: Filter theo nhi·ªÅu ti√™u ch√≠
Responsive Design: Mobile-first, animations
Form Validation: Client & server validation
File Structure: MVC pattern, modular components

